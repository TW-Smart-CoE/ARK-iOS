# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Build an app with Dev env"
  lane :build_dev do
    certificate_dev
    build_package({ :configuration => "Debug", :export_method => "ad-hoc" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app with Uat env"
  lane :build_uat do
    certificate_uat
    build_package({ :configuration => "Uat", :export_method => "ad-hoc" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app with Staging env"
  lane :build_staging do
    certificate_staging
    build_package({ :configuration => "Staging", :export_method => "ad-hoc" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app with Release env"
  lane :build_release do
    certificate_release
    build_package({ :configuration => "Release", :export_method => "app-store" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app and upload to Testflight"
  lane :release_to_test_channel do
    build_release

    apple_dev_portal_id = CredentialsManager::AppfileConfig.try_fetch_value(:apple_dev_portal_id)
    upload_to_testflight(
      username: apple_dev_portal_id
    )
  end

  desc "Runs all the unit tests"
  lane :unit_tests do
    scheme = "All-Tests"
    run_tests(
      workspace: ENV["KEY_WORKSPACE"],
      scheme: scheme,
      output_directory: ENV["TEST_OUTPUT_DIR"],
      code_coverage: true,
      clean: true
    )

    coverage_report()
  end

  desc "Genarate coverage report for Unit Test"
  lane :coverage_report do
    scheme = "All-Tests"
    clean_test_coverage_dir()
    xcov(
      workspace: ENV["KEY_WORKSPACE"],
      scheme: scheme,
      configuration: "Debug",
      minimum_coverage_percentage: ENV["MIN_COVERAGE"],
      output_directory: ENV["COVERAGE_OUTPUT_DIR"],
      markdown_report: true,
      disable_coveralls: true
    )
  end

  desc "Runs all the static check"
  lane :check do
    lint_base({ :mode => :lint })
  end

  desc "Autocorrect all swift files"
  lane :lint_correct do
    lint_base({ :mode => :fix })
  end

  desc "Config certificate for dev"
  lane :certificate_debug do
    configuration = "Debug"
    suffix = ".dev"
    app_identifier = ENV['KEY_APP_IDENTIFIER'] + suffix

    certificate({
      :type => "development",
      :suffix => suffix,
      :configuration => app_identifier
    })
  end

  desc "Config certificate for dev build"
  lane :certificate_dev do
    configuration = "Debug"
    suffix = ".dev"
    app_identifier = ENV['KEY_APP_IDENTIFIER'] + suffix

    certificate({
      :type => "adhoc",
      :suffix => suffix,
      :configuration => configuration
    })
  end

  desc "Config certificate for uat build"
  lane :certificate_uat do
    configuration = "Uat"
    suffix = ".#{configuration.downcase}"
    app_identifier = ENV['KEY_APP_IDENTIFIER'] + suffix

    certificate({
      :type => "adhoc",
      :suffix => suffix,
      :configuration => configuration
    })
  end

  desc "Config certificate for staging build"
  lane :certificate_staging do |options|
    configuration = "Staging"
    suffix = ".#{configuration.downcase}"
    app_identifier = ENV['KEY_APP_IDENTIFIER'] + suffix

    certificate({
      :type => "adhoc",
      :suffix => suffix,
      :configuration => configuration
    })
  end

  desc "Config certificate for release build"
  lane :certificate_release do
    app_identifier = ENV['KEY_APP_IDENTIFIER']
    certificate({
      :type => "appstore",
      :suffix => "",
      :configuration => "Release"
    })
  end

  desc "Delete keychain"
  lane :delete_project_keychain do
    if project_keychain_exists 
      delete_keychain(name: ENV['KEY_CHAIN_NAME'])
    end
  end

  private_lane :certificate do |options|
    app_identifier = ENV['KEY_APP_IDENTIFIER'] + options[:suffix]
    match_base({
      :type => options[:type],
      :app_identifier => app_identifier
    })

    profile_path = ENV["sigh_#{app_identifier}_#{options[:type]}_profile-path"]

    development_type = "development"
    developer_identity = "iPhone Developer"
    distribution_identity = "iPhone Distribution"

    update_code_signing_settings(
      path: ENV['KEY_PROJECT'],
      targets: ENV['KEY_PROJECT_NAME'],
      build_configurations: options[:configuration],
      profile_name: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING][app_identifier],
      code_sign_identity: options[:type] == development_type ? developer_identity : distribution_identity
    )
  end

  private_lane :apple_api_key do
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_API_KEY_ID'],
      issuer_id: ENV['APPLE_API_ISSUER_ID'],
      key_filepath: ENV['APPLE_API_KEY_FILEPATH'],
      duration: 1200,
      in_house: false
    )
  end

  private_lane :ensure_keychain do |options|
    keychain_name = ENV['KEY_CHAIN_NAME']
    keychain_password = ENV['KEY_CHAIN_PASSWORD']

    if project_keychain_exists 
      unlock_keychain( 
        path: project_keychain_path,
        password: keychain_password
      )
    else
      create_keychain(
        name: keychain_name,
        password: keychain_password,
        unlock: true,
        timeout: 0,
        lock_when_sleeps: true
      )
    end
  end

  private_lane :project_keychain_path do
    keychain_name = ENV['KEY_CHAIN_NAME']
    keychain_path = "~/Library/Keychains/#{keychain_name}-db"
  end

  private_lane :project_keychain_exists do
    keychain_path = project_keychain_path()
    File.exist? File.expand_path(keychain_path)
  end

  private_lane :match_base do |options|
    keychain_name = ENV['KEY_CHAIN_NAME']
    keychain_password = ENV['KEY_CHAIN_PASSWORD']

    ensure_keychain({
      :name => keychain_name,
      :password => keychain_password
    })

    api_key = apple_api_key()

    match(
      type: options[:type],
      app_identifier: options[:app_identifier],
      api_key: api_key,
      force_for_new_devices: true,
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )
  end

  private_lane :clean_test_coverage_dir do
    sh "rm -rf ../#{ENV["COVERAGE_OUTPUT_DIR"]}/*"
  end

  private_lane :lint_base do |options|
    swiftlint(
      mode: options[:mode],
      strict: true,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: "./.swiftlint.yml",
      output_file: "./fastlane/report.md",
      reporter: "markdown",
      raise_if_swiftlint_error: true,   
      ignore_exit_status: true
    )
  end

  private_lane :build_package do |options|
    team_id = ENV['KEY_TEAM_ID']
    scheme = ENV['KEY_PROJECT_NAME']
    version = get_version_number(xcodeproj: ENV['KEY_PROJECT'])
    build_number = get_build_number(xcodeproj: ENV['KEY_PROJECT'])
    ipa_name = "ARK.#{version}.#{build_number}.#{options[:configuration].downcase}.ipa"

    build_app(
      workspace: ENV['KEY_WORKSPACE'],
      scheme: scheme,
      configuration: options[:configuration],
      export_method: options[:export_method],
      export_team_id: team_id,
      silent: false,
      clean: true,
      output_directory: "./build/packages", 
      output_name: ipa_name,
      include_bitcode: false
    )
  end

  desc "Notify message to user"
  private_lane :notify_message do |options|
    if is_ci
      notification_slack(options)
    else
      notification_mac(options)
    end
  end

  private_lane :notification_mac do |options|
    notification(subtitle: "Finished Building", message: options[:message])
  end

  private_lane :notification_slack do |options|
    # For security, we put this value to env.
    # You can find this value in ".env.default" file
    slack_url = ENV["SLACK_URL"]
    slack(
      slack_url: slack_url,
      message: options[:message],
      success: true,
      payload: {
        "Build Date" => Time.new.to_s,
        "Built by" => "Jenkins",
      },
      default_payloads: [:git_branch, :git_author]
    )
  end

  before_all do |lane|
    sh "export LC_ALL=en_US.UTF-8"
    sh "export LANG=en_US.UTF-8"
  end

end
