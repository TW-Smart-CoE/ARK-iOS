# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Build an app with Debug env"
  lane :build_dev do
    certificate_dev
    build_package({ :configuration => "Debug", :export_method => "ad-hoc" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app with Uat env"
  lane :build_uat do
    certificate_uat
    build_package({ :configuration => "Uat", :export_method => "ad-hoc" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app with Staging env"
  lane :build_staging do
    certificate_staging
    build_package({ :configuration => "Staging", :export_method => "ad-hoc" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app with Release env"
  lane :build_release do
    certificate_release
    build_package({ :configuration => "Release", :export_method => "app-store" })
    notification_options = {
      :message => "Finished #{lane_context[SharedValues::LANE_NAME]} on #{Time.new.to_s}"
    }
    notify_message(notification_options)
  end

  desc "Build an app and upload to Testflight"
  lane :release_to_test_flight do
    build_release

    apple_dev_portal_id = CredentialsManager::AppfileConfig.try_fetch_value(:apple_dev_portal_id)
    upload_to_testflight(
      username: apple_dev_portal_id
    )
  end

  desc "Runs all the unit tests"
  lane :unit_tests do
    run_tests(scheme: "ARK-iOS")
  end

  desc "Runs all the static check"
  lane :check do
    lint_base({ :mode => :lint })
  end

  desc "Autocorrect all swift files"
  lane :lint_correct do
    lint_base({ :mode => :fix })
  end

  desc "Config certificate for debug"
  lane :certificate_debug do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + '.debug'
    match(
      type: 'development',
      app_identifier: [app_identifier],
      force_for_new_devices: true,
      readonly: false
    )
  end

  desc "Config certificate for dev build"
  lane :certificate_dev do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + '.debug'
    match(
      type: 'adhoc',
      app_identifier: [app_identifier],
      force_for_new_devices: true,
      readonly: false
    )
  end

  desc "Config certificate for uat build"
  lane :certificate_uat do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + '.uat'
    match(
      type: 'adhoc',
      app_identifier: [app_identifier],
      force_for_new_devices: true,
      readonly: false
    )
  end

  desc "Config certificate for staging build"
  lane :certificate_staging do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + '.staging'
    match(
      type: 'adhoc',
      app_identifier: [app_identifier],
      force_for_new_devices: true,
      readonly: false
    )
  end

  desc "Config certificate for release build"
  lane :certificate_release do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    match(
      type: 'appstore',
      app_identifier: [app_identifier],
      force_for_new_devices: true,
      readonly: false
    )
  end


  private_lane :lint_base do |options|
    swiftlint(
      mode: options[:mode],
      strict: true,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: "./.swiftlint.yml",
      output_file: "./fastlane/report.md",
      reporter: "markdown",
      raise_if_swiftlint_error: true,   
      ignore_exit_status: true
    )
  end

  private_lane :build_package do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    build_app(
      workspace: "ARK-iOS.xcworkspace",
      scheme: "ARK-iOS",
      configuration: options[:configuration],
      export_method: options[:export_method],
      export_team_id: team_id,
      silent: false,
      clean: true,
      output_directory: "./build/packages", 
      include_bitcode: false
    )
  end

  desc "Notify message to user"
  private_lane :notify_message do |options|
    if is_ci
      notification_slack(options)
    else
      notification_mac(options)
    end
  end

  private_lane :notification_mac do |options|
    notification(subtitle: "Finished Building", message: options[:message])
  end

  private_lane :notification_slack do |options|
    # For security, we put this value to env.
    # You can find this value in ".env.default" file
    slack_url = ENV["SLACK_URL"]
    slack(
      slack_url: slack_url,
      message: options[:message],
      success: true,
      payload: {
        "Build Date" => Time.new.to_s,
        "Built by" => "Jenkins",
      },
      default_payloads: [:git_branch, :git_author]
    )
  end

  before_all do |lane|
    sh "export LC_ALL=en_US.UTF-8"
    sh "export LANG=en_US.UTF-8"
  end

end
